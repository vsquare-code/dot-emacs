#+STARTUP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

;; Disable Bell Sound
(setq ring-bell-function 'ignore)

;; Always Show Line Numbers
(global-linum-mode 1)

(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Slime
(setq inferior-lisp-program "C:/Program Files (X86)/clisp-2.49/clisp.Exe")

;; Set The Default Directory
(setq default-directory "C:/Users/vishnu/programs/elisp")
#+END_SRC

* Try

#+BEGIN_SRC emacs-lisp
(use-package try
	     :ensure t)
#+END_SRC

* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	     :ensure t
	     :config
	     (which-key-mode))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/vishnu/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t))

  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-agenda-files (list "~/vishnu/orgfiles/calender.org"
			       "~/vishnu/orgfiles/notes.org"
			       "~/vishnu/orgfiles/idea.org"
			       "~/vishnu/orgfiles/journal.org"
			       "~/vishnu/orgfiles/snotes.org"))

  (setq org-capture-templates
	'(("a" "Appointment" entry (file+headline  "~/vishnu/orgfiles/calender.org" "Appointments")
	   "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	  ("n" "Note" entry (file+headline "~/vishnu/orgfiles/notes.org" "Notes")
	   "* Note %?\n%T")
	  ("l" "Link" entry (file+headline "~/vishnu/orgfiles/links.org" "Links")
	   "* %? %^L %^g \n%T" :prepend t)
	  ("b" "Blog idea" entry (file+headline "~/vishnu/orgfiles/idea.org" "Blog Topics:")
	   "* %?\n%T" :prepend t)
	  ("t" "To Do Item" entry (file+headline "~/vishnu/orgfiles/idea.org" "To Do Items")
	   "* %?\n%T" :prepend t)
	  ("j" "Journal" entry (file+datetree "~/vishnu/journal.org")
	   "* %?\nEntered on %U\n  %i\n  %a")
	  ("s" "Screencast" entry (file "~/vishnu/orgfiles/snotes.org")
	   "* %?\n%i\n")))
#+END_SRC
* Ace Windows
#+BEGIN_SRC emacs-lisp
; add this to init.el
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* Swiper/ Ivy/ Counsel
#+BEGIN_SRC emacs-lisp
  ;; https://cestlaz.github.io/posts/using-emacs-6-swiper/
  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

* Avy - Navigate By Searching For A Letter On The Screen And Jumpig To It
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("c-:" . avy-goto-char))
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
;; https://cestlaz.github.io/posts/using-emacs-8-autocomplete/
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))

(use-package color-theme-modern
  :ensure t)
#+END_SRC

* Reveal.Js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC
* Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
	  '(("django" . "\\.html'")))
    (setq web-mode-ac-sources-alist
	  '(("css" . (ac-source-css-property))
	    ("html" . (ac-source-words-in-buffer ac-source-abbrev)))))

  (setq web-mode-enable-auto-closing t)
#+END_SRC

* Misc packages
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-color "#666600"))

  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (setq save-interprogram-paste-before-kill t)

  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this

  (use-package iedit
    :ensure t) 
#+END_SRC
